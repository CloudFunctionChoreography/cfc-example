# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: public-cloud

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  versionFunctions: false
  # overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 256
  timeout: 30

  # add statements to the Lambda function's IAM Role
  iamRoleStatements:
  # allows lambda functions to directly invoke other lambda functions
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
      Resource: { "Fn::Join" : ["", ["arn:aws:lambda:*" ] ]  }


# define service wide environment variables
  environment:
    workflowsLocation: ${file(./preProcessWorkflowJson.js)}
    owApiAuthKey: ${file(./accessKeys.json):openWhisk.owApiAuthKey}
    owApiAuthPassword: ${file(./accessKeys.json):openWhisk.owApiAuthPassword}
    awsAccessKeyId: ${file(./accessKeys.json):awsLambda.accessKeyId}
    awsSecretAccessKey: ${file(./accessKeys.json):awsLambda.secretAccessKey}

# you can add packaging information here
package:
  include:
    - node_modules/**
    - function-workflows/**
    - workflows.json
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  function1:
    handler: handler1.hello
    events:
      - http:
          method: post
          path: /api/function1
  function2:
    handler: handler2.hello
    events:
      - http:
          method: post
          path: /api/function2
  function3:
    handler: handler3.hello
    events:
      - http:
          method: post
          path: /api/function3
  function4:
    handler: handler4.hello
    events:
      - http:
          method: post
          path: /api/function4


#######################     START: CloudFormation resource override     ###########################
resources:
  Resources:
  ###########   Workaround for issue: https://github.com/serverless/serverless/issues/4862 ############
  # API Gateway supports asynchronous lambda invocation when integration type is Event. Currently it is not
  # possible to configure this in serverless directly and requires a cloudformation resource override to enable.
    # Note, to have consistent naming in the CloudFormation Templates that get deployed
    # we use a standard pattern:
    # {Function Name}{Cloud Formation Resource Type}{Resource Name}{SequentialID or Random String}
    # path from function 1: /api/function1 => ApiGatewayMethodApiFunction1Post
    ApiGatewayMethodApiFunction1Post:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        RequestParameters:
          method.request.header.X-Amz-Invocation-Type: true
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Content-Type: true
        Integration:
          IntegrationHttpMethod: POST
          Type: "AWS"
          RequestParameters:
            "integration.request.header.X-Amz-Invocation-Type": "method.request.header.X-Amz-Invocation-Type"
          IntegrationResponses:
            - StatusCode: 200
    ApiGatewayMethodApiFunction2Post:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        RequestParameters:
          method.request.header.X-Amz-Invocation-Type: true
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Content-Type: true
        Integration:
          IntegrationHttpMethod: POST
          Type: "AWS"
          RequestParameters:
            "integration.request.header.X-Amz-Invocation-Type": "method.request.header.X-Amz-Invocation-Type"
          IntegrationResponses:
            - StatusCode: 200
    ApiGatewayMethodApiFunction3Post:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        RequestParameters:
          method.request.header.X-Amz-Invocation-Type: true
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Content-Type: true
        Integration:
          IntegrationHttpMethod: POST
          Type: "AWS"
          RequestParameters:
            "integration.request.header.X-Amz-Invocation-Type": "method.request.header.X-Amz-Invocation-Type"
          IntegrationResponses:
            - StatusCode: 200
    ApiGatewayMethodApiFunction4Post:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        RequestParameters:
          method.request.header.X-Amz-Invocation-Type: true
        MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Content-Type: true
        Integration:
          IntegrationHttpMethod: POST
          Type: "AWS"
          RequestParameters:
            "integration.request.header.X-Amz-Invocation-Type": "method.request.header.X-Amz-Invocation-Type"
          IntegrationResponses:
            - StatusCode: 200
#############################   End Workaround    ###################################
#######################     End: CloudFormation resource override     ###########################

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
